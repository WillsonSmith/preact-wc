{"version":3,"file":"index.umd.js","sources":["../src/components/Counter/Counter.js","../src/util/preact-shadow-dom.js","../src/index.js"],"sourcesContent":["import { h } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { ShadowDOM, Shadow } from '../../util/preact-shadow-dom';\n// import styles from './styles.css';\n\nconst styles = `\n:host {\n  --spacing: 1.6rem;\n}\n\n.Wrapper {\n  padding: var(--spacing);\n}\n`;\n\nexport const Counter = ShadowDOM(() => {\n  const [count, setCount] = useState(0);\n  const update = value => {\n    setCount(value);\n  };\n\n  return (\n    <div class=\"Wrapper\">\n      <div>Count: {count}</div>\n      <button onClick={() => update(count + 1)}>Increment</button>\n    </div>\n  );\n}, styles);\n","import { h, render } from 'preact';\nimport { useRef, useEffect } from 'preact/hooks';\n\n// based on https://github.com/developit/preact-shadow-dom\n// shadowRoot swallowing events\nexport function ShadowDOM(ComponentClass, CSSString) {\n  const ShadowDOMComponent = props => {\n    const shadowRoot = useRef(null);\n\n    useEffect(() => {\n      if (shadowRoot) {\n        const shadow = shadowRoot.current.attachShadow({ mode: 'open' });\n        render(<ComponentClass {...props} />, shadow);\n        shadow.innerHTML += `<style>${CSSString}</style>`;\n      }\n    }, [shadowRoot]);\n\n    return <div ref={shadowRoot}></div>;\n  };\n\n  return ShadowDOMComponent;\n}\n\n// based on https://github.com/developit/preact-shadow-root\nexport class Shadow {\n  shouldComponentUpdate(nextProps) {\n    this.update(nextProps);\n    return false;\n  }\n  componentDidMount() {\n    let parent = this.base && this.base.parentNode;\n    if (parent) {\n      this.shadow = parent.attachShadow({ mode: 'open' });\n      this.update(this.props);\n    }\n  }\n  componentWillUnmount() {\n    this.update(this.props, true);\n  }\n  update(props, unrender) {\n    let child = props.children;\n    let replace;\n    if (child && child[0] && 'nodeName' in child[0]) {\n      child = child[0];\n      replace = this.shadow.firstChild;\n    }\n    let root = render(unrender ? null : child, this.shadow, replace);\n    if (unrender && root) root.remove();\n  }\n  render() {}\n}\n","import register from 'preact-custom-element';\nimport { Counter } from './components';\n\nconsole.log(Counter);\n\nregister(Counter, 'my-counter');\n"],"names":["ComponentClass","Counter","useState","count","setCount","class","h","onClick","props","shadowRoot","useRef","useEffect","shadow","current","attachShadow","mode","render","innerHTML","ref","console","log","register"],"mappings":"sXAKA,ICA0BA,EDUbC,GCVaD,EDUO,iBACLE,WAAS,GAA5BC,OAAOC,OAKd,kBACOC,MAAM,WACTC,yBAAaH,GACbG,cAAQC,QAAS,WANnBH,EAMgCD,EAAQ,oBClBf,SAAAK,GACzB,IAAMC,EAAaC,SAAO,MAU1B,OARAC,YAAU,WACR,GAAIF,EAAY,CACd,IAAMG,EAASH,EAAWI,QAAQC,aAAa,CAAEC,KAAM,SACvDC,SAAOV,IAACN,EAAmBQ,GAAWI,GACtCA,EAAOK,gHAER,CAACR,eAEQS,IAAKT,MCdrBU,QAAQC,IAAInB,GAEZoB,EAASpB,EAAS"}